{"version":3,"sources":["reducers/formReducers.js","reducers/index.js","store/configureStore.js","containers/TelForm.js","components/App.js","index.js"],"names":["initialState","countries","showCountriesList","selectedCountry","selectedCountryCode","selectedCountryPrefix","selectedCountryMin","selectedCountryMax","inputValue","loading","error","showPopUp","showMessage","alertMessage","rootReducer","combineReducers","form","state","action","type","store","createStore","applyMiddleware","thunk","TelForm","getCountries","a","fetch","res","ok","Error","status","json","body","onCountriesLoaded","filteredCountries","filter","element","phoneInfo","setState","onFocus","handleCountriesListShow","autoSelectPrefix","str","prefix","slice","includes","length","code","toLowerCase","onInputChange","e","target","value","filteredStr","inputValidation","regex","match","join","handleCountryClick","data","dataset","country","min","max","substitute","tel","console","log","newInputValue","handleSubmit","preventDefault","onBtnClick","bool","setTimeout","renderFlag","flag","className","renderDatalist","map","key","id","data-prefix","data-country","name","data-code","data-min","minLength","data-max","maxLength","onClick","this","then","countriesList","popUp","popUpMessage","Fragment","onSubmit","list","onChange","Component","connect","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ddd4552.chunk.js","sourcesContent":["export const initialState = {\n  countries: [],\n  showCountriesList: false,\n  selectedCountry: \"\",\n  selectedCountryCode: \"\",\n  selectedCountryPrefix: \"\",\n  selectedCountryMin: \"\",\n  selectedCountryMax: \"\",\n  inputValue: \"+\",\n  loading: true,\n  error: false,\n  showPopUp: false,\n  showMessage: false,\n  alertMessage: \" \"\n};\n\nexport const formReducers = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SEND_FORM\":\n      return;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { formReducers } from \"./formReducers\";\n\nexport const rootReducer = combineReducers({\n  form: formReducers\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"../reducers\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n//import { sendForm } from \"../actions\";\n\nimport \"./TelForm.css\";\nimport \"./flags.css\";\n\nexport default class TelForm extends Component {\n  state = {\n    countries: [],\n    showCountriesList: false,\n    selectedCountry: \"\",\n    selectedCountryCode: \"\",\n    selectedCountryPrefix: \"\",\n    selectedCountryMin: \"\",\n    selectedCountryMax: \"\",\n    inputValue: \"+\",\n    loading: true,\n    error: false,\n    showPopUp: false,\n    showMessage: false,\n    alertMessage: \" \"\n  };\n\n  // Получение списка стран с сервера\n\n  getCountries = async () => {\n    const res = await fetch(\"https://koronapay.com/online/api/countries\");\n    if (!res.ok) {\n      throw new Error(`Could not fetch, received ${res.status}`);\n    }\n    const body = await res.json();\n    return body;\n  };\n\n  // Фильтруем список (есть страны без префиксов)\n\n  onCountriesLoaded = countries => {\n    const filteredCountries = countries.filter(element => {\n      return element.phoneInfo;\n    });\n    this.setState({ countries: filteredCountries, loading: false });\n  };\n\n  componentDidMount() {\n    this.getCountries().then(this.onCountriesLoaded);\n  }\n\n  onFocus = () => {\n    this.handleCountriesListShow();\n  };\n\n  // Отрисовка списка стран (рисуем, если пользователь ранее не выбрал страну)\n\n  handleCountriesListShow = () => {\n    const { selectedCountry } = this.state;\n\n    if (!selectedCountry) {\n      this.setState({ showCountriesList: true });\n    }\n    return;\n  };\n\n  // Автоматический выбор префикса и флага (первая страна из списка)\n\n  autoSelectPrefix = str => {\n    const { countries, selectedCountryPrefix } = this.state;\n    let prefix = `+${str.slice(0, 3)}`;\n\n    let filteredCountries = countries.filter(element => {\n      return element.phoneInfo.prefix.includes(prefix);\n    });\n\n    if (prefix !== selectedCountryPrefix && filteredCountries.length > 0) {\n      this.setState({ showCountriesList: true, selectedCountry: \"\" });\n    }\n\n    if (filteredCountries.length > 0) {\n      const code = filteredCountries[0].code;\n      this.setState({\n        selectedCountryPrefix: prefix,\n        selectedCountryCode: code.toLowerCase()\n      });\n    }\n    return;\n  };\n\n  // Обработка ввода в строку input\n\n  onInputChange = e => {\n    this.setState({ alertMessage: \"\" });\n\n    const str = e.target.value;\n    const filteredStr = this.inputValidation(str.slice(1));\n\n    this.setState({ inputValue: `+${filteredStr}` });\n\n    this.autoSelectPrefix(filteredStr);\n    this.handleCountriesListShow();\n  };\n\n  // Валидация \"на лету\"  вводимого пользователем значения (рзрешено вводить только цифры)\n\n  inputValidation = str => {\n    const regex = /\\d/g;\n    const filteredStr = str.match(regex) ? str.match(regex).join(\"\") : \"\";\n    return filteredStr;\n  };\n\n  // Обработчик выбора пользователем страны из списка\n\n  handleCountryClick = e => {\n    const data = e.target.dataset;\n\n    this.setState({\n      selectedCountry: data.country[0] + data.country.slice(1).toLowerCase(),\n      selectedCountryCode: data.code.toLowerCase(),\n      selectedCountryPrefix: data.prefix,\n      selectedCountryMin: data.min,\n      selectedCountryMax: data.max,\n      showCountriesList: false\n    });\n\n    if (this.state.inputValue < data.prefix) {\n      this.setState({ inputValue: data.prefix });\n    }\n\n    this.substitute(data.prefix);\n  };\n\n  // Функция подставляет префикс выбранной страны в строку ввода\n\n  substitute = str => {\n    let tel = this.state.inputValue;\n    const length = str.length;\n    console.log(tel.slice(length));\n    const newInputValue = str + tel.slice(length);\n    this.setState({ inputValue: newInputValue });\n  };\n\n  // Обработчик отправки формы\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      selectedCountry,\n      selectedCountryMin,\n      selectedCountryMax,\n      selectedCountryPrefix\n    } = this.state;\n\n    const tel = this.state.inputValue.length;\n    const min = +selectedCountryMin + selectedCountryPrefix.length;\n    const max = +selectedCountryMax + selectedCountryPrefix.length;\n\n    if (!selectedCountry.length) {\n      this.setState({\n        alertMessage: `Выберите страну из списка`\n      });\n      return;\n    }\n\n    if (tel >= min && tel <= max) {\n      this.setState({ showPopUp: true });\n    } else {\n      this.setState({\n        alertMessage: `Некорректный формат: введите номер длиной ${\n          max === min ? max : `${min} - ${max}`\n        } символов`\n      });\n    }\n    return;\n  };\n\n  // Обработчик кликов на кнопки да/нет в диалоге отправки формы\n\n  onBtnClick = bool => {\n    this.setState({ showPopUp: false });\n    if (bool) {\n      this.setState({\n        selectedCountry: \"\",\n        selectedCountryCode: \"\",\n        selectedCountryPrefix: \"\",\n        selectedCountryMin: \"\",\n        selectedCountryMax: \"\",\n        inputValue: \"+\",\n        showMessage: true\n      });\n      setTimeout(() => {\n        this.setState({ showMessage: false });\n      }, 5000);\n    }\n  };\n\n  // Рендер-функция для отрисовки флага\n\n  renderFlag = code => {\n    const flag = `flag flag-${code}`;\n    return <div className={flag}></div>;\n  };\n\n  // Рендер-функция для отрисовки списка стран\n\n  renderDatalist = countries => {\n    let template;\n    const prefix = this.state.selectedCountryPrefix;\n    const filteredCountries = countries.filter(element => {\n      return element.phoneInfo.prefix.includes(prefix);\n    });\n\n    template = filteredCountries.map(element => {\n      const flag = this.renderFlag(element.code.toLowerCase());\n      return (\n        <li\n          key={element.id}\n          data-prefix={element.phoneInfo.prefix}\n          data-country={element.name}\n          data-code={element.code}\n          data-min={element.phoneInfo.minLength}\n          data-max={element.phoneInfo.maxLength}\n          onClick={e => this.handleCountryClick(e)}\n        >\n          {flag} {element.name} ({element.phoneInfo.prefix})\n        </li>\n      );\n    });\n    return template;\n  };\n\n  render() {\n    const {\n      countries,\n      selectedCountry,\n      selectedCountryCode,\n      loading,\n      inputValue,\n      showCountriesList,\n      showPopUp,\n      showMessage,\n      alertMessage\n    } = this.state;\n\n    const flag = selectedCountryCode\n      ? this.renderFlag(selectedCountryCode)\n      : null;\n\n    const countriesList = showCountriesList ? (\n      <ul>\n        <li\n          onClick={() => {\n            this.setState({ showCountriesList: false });\n          }}\n        >\n          Закрыть список стран\n        </li>\n        {this.renderDatalist(countries)}\n      </ul>\n    ) : null;\n\n    const popUp = showPopUp ? (\n      <div className=\"popUp\">\n        <p>Вы уверены, что хотите отправить сообщение?</p>\n        <button onClick={() => this.onBtnClick(true)}>Да</button>\n        <button onClick={() => this.onBtnClick(false)}>Нет</button>\n      </div>\n    ) : null;\n\n    const popUpMessage = showMessage ? (\n      <div className=\"popUp\">\n        <p>Сообщение было успешно отправлено</p>\n      </div>\n    ) : null;\n\n    return loading ? (\n      <p>Загрузка</p>\n    ) : (\n      <React.Fragment>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <p>Введите номер телефона (цифры 0-9) и выберите страну из списка.</p>\n          <p className=\"country\">Выбранная страна: {selectedCountry}</p>\n          <input\n            type=\"tel\"\n            list=\"countries\"\n            value={inputValue}\n            onChange={e => this.onInputChange(e)}\n            onFocus={() => this.onFocus()}\n          />\n          <span>{alertMessage}</span>\n          <div className=\"flagIcon\">{flag}</div>\n          {countriesList}\n          <button type=\"submit\">Далее</button>\n        </form>\n        {popUp}\n        {popUpMessage}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = store => {\n  return {\n    form: store.form\n  };\n};\n\nconnect(mapStateToProps)(TelForm);\n","import React from \"react\";\nimport TelForm from \"../containers/TelForm\";\nimport \"./App.css\";\n\nconst App = () => (\n  <div>\n    <TelForm />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}