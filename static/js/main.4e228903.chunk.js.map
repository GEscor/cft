{"version":3,"sources":["reducers/formReducers.js","reducers/index.js","store/configureStore.js","containers/TelForm.js","components/App.js","index.js"],"names":["initialState","countries","showCountriesList","selectedCountry","selectedCountryCode","selectedCountryPrefix","selectedCountryMin","selectedCountryMax","inputValue","loading","error","showPopUp","showMessage","alertMessage","rootReducer","combineReducers","form","state","action","type","store","createStore","applyMiddleware","thunk","TelForm","getCountries","a","fetch","res","ok","Error","status","json","body","console","log","onCountriesLoaded","filteredCountries","filter","element","phoneInfo","setState","onFocus","handleCountriesListShow","autoSelectPrefix","str","prefix","slice","includes","length","code","toLowerCase","onInputChange","e","target","value","filteredStr","inputValidation","regex","match","join","handleCountryClick","data","dataset","country","min","max","handleSubmit","preventDefault","tel","onBtnClick","bool","setTimeout","renderFlag","flag","className","renderDatalist","map","key","id","data-prefix","data-country","name","data-code","data-min","minLength","data-max","maxLength","onClick","this","then","countriesList","popUp","popUpMessage","Fragment","onSubmit","list","onChange","Component","connect","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e228903.chunk.js","sourcesContent":["export const initialState = {\r\n  countries: [],\r\n  showCountriesList: false,\r\n  selectedCountry: \"\",\r\n  selectedCountryCode: \"\",\r\n  selectedCountryPrefix: \"\",\r\n  selectedCountryMin: \"\",\r\n  selectedCountryMax: \"\",\r\n  inputValue: \"+\",\r\n  loading: true,\r\n  error: false,\r\n  showPopUp: false,\r\n  showMessage: false,\r\n  alertMessage: \" \"\r\n};\r\n\r\nexport const formReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SEND_FORM\":\r\n      return;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { formReducers } from \"./formReducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  form: formReducers\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n//import { sendForm } from \"../actions\";\r\n\r\nimport \"./TelForm.css\";\r\nimport \"./flags.css\";\r\n\r\nexport default class TelForm extends Component {\r\n  state = {\r\n    countries: [],\r\n    showCountriesList: false,\r\n    selectedCountry: \"\",\r\n    selectedCountryCode: \"\",\r\n    selectedCountryPrefix: \"\",\r\n    selectedCountryMin: \"\",\r\n    selectedCountryMax: \"\",\r\n    inputValue: \"+\",\r\n    loading: true,\r\n    error: false,\r\n    showPopUp: false,\r\n    showMessage: false,\r\n    alertMessage: \" \"\r\n  };\r\n\r\n  // Получение списка стран с сервера\r\n\r\n  getCountries = async () => {\r\n    const res = await fetch(\"https://koronapay.com/online/api/countries\");\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch, received ${res.status}`);\r\n    }\r\n    const body = await res.json();\r\n    console.log(body);\r\n    return body;\r\n  };\r\n\r\n  // Фильтруем список (есть страны без префиксов)\r\n\r\n  onCountriesLoaded = countries => {\r\n    /*\r\n    const filteredCountries = countries.filter(element => {\r\n      if (element.phoneInfo) return element;\r\n    });\r\n    */\r\n    const filteredCountries = countries.filter(element => {\r\n      return element.phoneInfo;\r\n    });\r\n    console.log(filteredCountries);\r\n    this.setState({ countries: filteredCountries, loading: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCountries().then(this.onCountriesLoaded);\r\n  }\r\n\r\n  onFocus = () => {\r\n    this.handleCountriesListShow();\r\n  };\r\n\r\n  // Отрисовка списка стран (рисуем, если пользователь ранее не выбрал страну)\r\n\r\n  handleCountriesListShow = () => {\r\n    const { selectedCountry } = this.state;\r\n    if (!selectedCountry) {\r\n      this.setState({ showCountriesList: true });\r\n    }\r\n    return;\r\n  };\r\n\r\n  // Автоматический выбор префикса и флага (первая страна из списка)\r\n\r\n  autoSelectPrefix = str => {\r\n    const { countries, selectedCountryPrefix } = this.state;\r\n    let prefix = `+${str.slice(0, 3)}`;\r\n    console.log(prefix);\r\n    /*\r\n    let filteredCountries = countries.filter(element => {\r\n      if (element.phoneInfo.prefix.includes(prefix)) {\r\n        return element;\r\n      }\r\n    });\r\n    */\r\n    let filteredCountries = countries.filter(element => {\r\n      return element.phoneInfo.prefix.includes(prefix);\r\n    });\r\n\r\n    if (prefix !== selectedCountryPrefix && filteredCountries.length > 0) {\r\n      this.setState({ showCountriesList: true, selectedCountry: \"\" });\r\n    }\r\n\r\n    console.log(filteredCountries);\r\n\r\n    if (filteredCountries.length > 0) {\r\n      const code = filteredCountries[0].code;\r\n      this.setState({\r\n        selectedCountryPrefix: prefix,\r\n        selectedCountryCode: code.toLowerCase()\r\n      });\r\n    }\r\n    return;\r\n  };\r\n\r\n  // Обработка ввода в строку input\r\n\r\n  onInputChange = e => {\r\n    this.setState({ alertMessage: \"\" });\r\n\r\n    const str = e.target.value;\r\n    const filteredStr = this.inputValidation(str.slice(1));\r\n\r\n    this.setState({ inputValue: `+${filteredStr}` });\r\n\r\n    this.autoSelectPrefix(filteredStr);\r\n    this.handleCountriesListShow();\r\n  };\r\n\r\n  // Валидация \"на лету\"  вводимого опльзователем значения (рзрешено вводить только цифры)\r\n\r\n  inputValidation = str => {\r\n    const regex = /\\d/g;\r\n    const filteredStr = str.match(regex) ? str.match(regex).join(\"\") : \"\";\r\n    return filteredStr;\r\n  };\r\n\r\n  // Обработчик выбора пользователем страны из списка\r\n\r\n  handleCountryClick = e => {\r\n    console.log(e.target);\r\n    const data = e.target.dataset;\r\n    this.setState({\r\n      selectedCountry: data.country,\r\n      selectedCountryCode: data.code.toLowerCase(),\r\n      selectedCountryPrefix: data.prefix,\r\n      selectedCountryMin: data.min,\r\n      selectedCountryMax: data.max,\r\n      showCountriesList: false\r\n    });\r\n    if (this.state.inputValue < data.prefix) {\r\n      this.setState({ inputValue: data.prefix });\r\n    }\r\n  };\r\n\r\n  // Обработчик отправки формы\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const {\r\n      selectedCountry,\r\n      selectedCountryMin,\r\n      selectedCountryMax,\r\n      selectedCountryPrefix\r\n    } = this.state;\r\n\r\n    const tel = this.state.inputValue.length;\r\n\r\n    const min = +selectedCountryMin + selectedCountryPrefix.length;\r\n    const max = +selectedCountryMax + selectedCountryPrefix.length;\r\n\r\n    if (!selectedCountry.length) {\r\n      this.setState({\r\n        alertMessage: `Выберите страну из списка`\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (tel >= min && tel <= max) {\r\n      this.setState({ showPopUp: true });\r\n    } else {\r\n      this.setState({\r\n        alertMessage: `Некорректный формат: введите номер длиной ${\r\n          max === min ? max : `${min} - ${max}`\r\n        } символов`\r\n      });\r\n    }\r\n    return;\r\n  };\r\n\r\n  onBtnClick = bool => {\r\n    this.setState({ showPopUp: false });\r\n    if (bool) {\r\n      this.setState({\r\n        selectedCountry: \"\",\r\n        selectedCountryCode: \"\",\r\n        selectedCountryPrefix: \"\",\r\n        selectedCountryMin: \"\",\r\n        selectedCountryMax: \"\",\r\n        inputValue: \"+\",\r\n        showMessage: true\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({ showMessage: false });\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  // Рендер-функция для отрисовки флага\r\n\r\n  renderFlag = code => {\r\n    const flag = `flag flag-${code}`;\r\n    return <div className={flag}></div>;\r\n  };\r\n\r\n  // Рендер функция для отрисовки одиночной страны из списка стран\r\n\r\n  renderDatalist = countries => {\r\n    let template;\r\n    const prefix = this.state.selectedCountryPrefix;\r\n    /*\r\n    const filteredCountries = countries.filter(element => {\r\n      if (element.phoneInfo.prefix.includes(prefix)) {\r\n        return element;\r\n      }\r\n    });\r\n    */\r\n    const filteredCountries = countries.filter(element => {\r\n      return element.phoneInfo.prefix.includes(prefix);\r\n    });\r\n\r\n    template = filteredCountries.map(element => {\r\n      const flag = this.renderFlag(element.code.toLowerCase());\r\n      return (\r\n        <li\r\n          key={element.id}\r\n          data-prefix={element.phoneInfo.prefix}\r\n          data-country={element.name}\r\n          data-code={element.code}\r\n          data-min={element.phoneInfo.minLength}\r\n          data-max={element.phoneInfo.maxLength}\r\n          onClick={e => this.handleCountryClick(e)}\r\n        >\r\n          {flag} {element.name} ({element.phoneInfo.prefix})\r\n        </li>\r\n      );\r\n    });\r\n    return template;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      countries,\r\n      selectedCountry,\r\n      selectedCountryCode,\r\n      loading,\r\n      inputValue,\r\n      showCountriesList,\r\n      showPopUp,\r\n      showMessage,\r\n      alertMessage\r\n    } = this.state;\r\n\r\n    const flag = selectedCountryCode\r\n      ? this.renderFlag(selectedCountryCode)\r\n      : null;\r\n\r\n    const countriesList = showCountriesList ? (\r\n      <ul>\r\n        <li\r\n          onClick={() => {\r\n            this.setState({ showCountriesList: false });\r\n          }}\r\n        >\r\n          Закрыть список стран\r\n        </li>\r\n        {this.renderDatalist(countries)}\r\n      </ul>\r\n    ) : null;\r\n\r\n    const popUp = showPopUp ? (\r\n      <div className=\"popUp\">\r\n        <p>Вы уверены, что хотите отправить сообщение?</p>\r\n        <button onClick={() => this.onBtnClick(true)}>Да</button>\r\n        <button onClick={() => this.onBtnClick(false)}>Нет</button>\r\n      </div>\r\n    ) : null;\r\n\r\n    const popUpMessage = showMessage ? (\r\n      <div className=\"popUp\">\r\n        <p>Сообщение было успешно отправлено</p>\r\n      </div>\r\n    ) : null;\r\n\r\n    return loading ? (\r\n      <p>Загрузка</p>\r\n    ) : (\r\n      <React.Fragment>\r\n        <form onSubmit={e => this.handleSubmit(e)}>\r\n          <p>Введите номер телефона (цифры 0-9) и выберите страну из списка.</p>\r\n          <p className=\"country\">Выбранная страна: {selectedCountry}</p>\r\n          <input\r\n            type=\"tel\"\r\n            list=\"countries\"\r\n            value={inputValue}\r\n            onChange={e => this.onInputChange(e)}\r\n            onFocus={() => this.onFocus()}\r\n          />\r\n          <span>{alertMessage}</span>\r\n          <div className=\"flagIcon\">{flag}</div>\r\n          {countriesList}\r\n          <button type=\"submit\">Далее</button>\r\n        </form>\r\n        {popUp}\r\n        {popUpMessage}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n  console.log(store); // посмотрим, что же у нас в store?\r\n  return {\r\n    form: store.form\r\n  };\r\n};\r\n// в наш компонент App, с помощью connect(mapStateToProps)\r\nconnect(mapStateToProps)(TelForm);\r\n/*\r\nconst TelForm = ({ dispatch }) => {\r\n  let input;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        if (!input.value.trim()) {\r\n          return;\r\n        }\r\n        dispatch(sendForm(input.value));\r\n        input.value = \"\";\r\n      }}\r\n    >\r\n      <input\r\n        type=\"tel\"\r\n        ref={node => (input = node)}\r\n        placeholder=\"Введите номер телефона\"\r\n      />\r\n      <button type=\"submit\">Далее</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapDispatchToProps)(TelForm);\r\n*/\r\n","import React from \"react\";\nimport TelForm from \"../containers/TelForm\";\nimport \"./App.css\";\n\nconst App = () => (\n  <div>\n    <TelForm />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}